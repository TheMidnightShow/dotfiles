;; ---------------------------------------------- ;;
;; ---------------- dashboard box --------------- ;;
;; ---------------------------------------------- ;;

(defwidget dashboard[]
  (box
    :orientation "v"
    :spacing 10
    :class "dashboard"
    :space-evenly false
    (box
      :spacing 5
      :orientation "h"
      (myUser)
      (metrics)
    )
    (box
      :spacing 5
      :orientation "h"
      (myCalendar)
      (myMediaPlayer)
    )
    (power)
  )
)

;; ---------------------------------------------- ;;
;; ---------------- media player ---------------- ;;
;; ---------------------------------------------- ;;


(defwidget mediaButtons []
  (box
    :class "mediaButtons"
    :space-evenly false
    :spacing 10
    (button 
      :onclick "./scripts/mediaControl.sh prev"
      "◀"
    )

    (button 
      :onclick "./scripts/mediaControl.sh toggle"
      "■"
    )

    (button 
      :onclick "./scripts/mediaControl.sh next"
      "▶"
    )
  )
)

(defwidget mediaProgress[]
  (box
    (scale 
      :class "mediaProgress" 
      :min 0 
      :max 101 
      :value mediaProgress
    )
  )
)

(defwidget mediaSong []
  (box 
    :halign "start"
    (label
      :text song
      :limit-width 28
      :class "mediaSong"
    )
  )
)

(defpoll mediaImage :interval "1s" "./scripts/mediaControl.sh update")
(defwidget myMediaPlayer []
  (box
    :class "mediaPlayer"
    :style mediaImage 
    (box
      :class "mediaData"
      :orientation "v"
      :space-evenly false
      (mediaSong)
      (mediaButtons)
      (mediaProgress)
    )
  )
)

;; ---------------------------------------------- ;;
;; ------------------- user --------------------- ;;
;; ---------------------------------------------- ;;

(defwidget userData []

  (box
    :orientation "v"
    :valign "center"
    (label
      :class "userData"
      :halign "start"
      :text "<midnight>" 
    )
    (label
      :class "userData"
      :text uptime
      :halign "start"
    )
  )
)

;; ---------------------------------------------- ;;
;; ---------------------------------------------- ;;

(defwidget userImage []
  (box
    :class "userBox"
    :halign "start"

    (box
    :class "userImage"
    :style "background-image: url('./assets/user.png')"))
)

;; ---------------------------------------------- ;;
;; ---------------------------------------------- ;;

(defwidget myUser []
  (box
    :space-evenly false
    :spacing 2
    :class "myUser"
    (userImage)
    (userData)
  )
)

;; ---------------------------------------------- ;;
;; ----------------- calendar ------------------- ;;
;; ---------------------------------------------- ;;

(defpoll time :interval "1m" "echo -- $(date +%R) --")
(defwidget myCalendar[]
  (box
    :class "myCalendar"
    :orientation "v"
    :space-evenly false
    :spacing 10
    (box
     (label
      :class "time"
      :text time
     )     
    )
    (calendar
      :space-evenly false
      :show-heading false
    )
  )
)

;; ---------------------------------------------- ;;
;; ------------------ power -------------------- ;;
;; ---------------------------------------------- ;;

(defwidget power[]
  (box
    :spacing 5
    :orientation "h"
    :space-evenly true
    (box
      :class "powerButton"
      (button
        :onclick "poweroff"
        "[off]"
      )
    )
    (box
      :class "powerButton"
      (button
        :onclick "reboot"
        "[res]"
      )
    )
    (box
      :class "powerButton"
      (button
        :onclick "exit"
        "[out]"
      )
    )
  )
)

;; ---------------------------------------------- ;;
;; ------------------ metrics ------------------- ;;
;; ---------------------------------------------- ;;

;; ---------------------------------------------- ;;

(defpoll updates :interval "1m" "checkupdates | wc -l")
(defwidget updates[]
  (box
    :class "metricBox"
    :space-evenly false
    :orientation "h"
    (box
      :class "metricIcon"
      "pkg"
    )
    (box
      :class "metricData"
      updates 
    )
  )
)

;; ---------------------------------------------- ;;

(defpoll battery :interval "1m" "cat /sys/class/power_supply/BAT1/capacity")
(defwidget battery[]
  (box
    :class "metricBox"
    :space-evenly false 
    (box 
      :class "metricIcon"
      "bat"
    )
    (box
      :class "metricData"
      battery
    )
  )
)

;; ---------------------------------------------- ;;

(defpoll volume :interval "1ms" "amixer get Master | grep Mono: | awk '{ print $4 }' | tr -d '[]'")
(defwidget volume[]
  (box
    :class "metricBox"
    :space-evenly false
    (box 
      :class "metricIcon"
      "vol"
    )
    (box
      :class "metricData"
      volume 
    )
  )
)

(defpoll brightness :interval "1ms" "brightnessctl | grep Current | awk '{ print $4 }' | tr -d '()'")
(defwidget brightness[]
  (box
    :class "metricBox"
    :space-evenly false
    (box 
      :class "metricIcon"
      "brg"
    )
    (box
      :class "metricData"
      brightness 
    )
  )
)

;; ---------------------------------------------- ;;

(defwidget metrics[]
  (box
    :orientation "v"
    :spacing 5
    (battery)
    (updates)    
    (volume)
    (brightness)
  )
)

;; ---------------------------------------------- ;;
